import { Navigate, useLocation } from "react-router-dom";
import { jwtDecode } from "jwt-decode"; // ‚úÖ ‡πÉ‡∏ä‡πâ named import

const ProtectedRoute = ({ children }) => {
  const location = useLocation();
  const publicPaths = ["/login", "/signup"];

  const rawToken = localStorage.getItem("token");
  let token = null;
  let isExpired = false;

  // üß† ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ token ‡πÄ‡∏õ‡πá‡∏ô object ‡∏´‡∏£‡∏∑‡∏≠ string
  try {
    token = JSON.parse(rawToken); // custom token: { accessToken, expiry }
  } catch {
    token = rawToken; // JWT string
  }

  // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  if (typeof token === "string") {
    try {
      const decoded = jwtDecode(token);
      if (decoded.exp * 1000 < Date.now()) {
        isExpired = true;
      }
    } catch {
      isExpired = true;
    }
  } else if (typeof token === "object" && token?.expiry) {
    if (Date.now() > token.expiry) {
      isExpired = true;
    }
  }

  // üßπ ‡∏•‡∏ö token ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  if (isExpired) {
    localStorage.removeItem("token");
    return <Navigate to="/login" replace state={{ from: location }} />;
  }

  // üõ°Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà public path ‚Üí redirect
  if (!token && !publicPaths.includes(location.pathname)) {
    return <Navigate to="/login" replace state={{ from: location }} />;
  }

  // üö´ ‡∏°‡∏µ token ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤ /login ‡∏´‡∏£‡∏∑‡∏≠ /signup ‚Üí redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
  if (token && publicPaths.includes(location.pathname)) {
    return <Navigate to="/" replace />;
  }

  return children;
};

export default ProtectedRoute;
